{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "String",
            "metadata": {
                "description": "Deployment location"
            }
        },
        "vsecVersion": {
            "defaultValue": "R77.30 - Bring Your Own License",
            "allowedValues": [
                "R77.30 - Bring Your Own License",
                "R80.10 - Bring Your Own License",
                "R80.10 - Pay As You Go (MGMT5)"
            ],
            "type": "String",
            "metadata": {
                "description": "Version of Check Point vSEC"
            } 
        },
        "adminPassword": {
            "type": "SecureString",
            "metadata": {
                "description": "Administrator password"
            }
        },
        "authenticationType": {
            "defaultValue": "password",
            "allowedValues": [
                "password",
                "sshPublicKey"
            ],
            "type": "String",
            "metadata": {
                "description": "Authentication type"
            }
        },
        "sshPublicKey": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Administrator SSH public key"
            }
        },
        "vmSize": {
            "defaultValue": "Standard_D3_v2",
            "type": "String",
            "metadata": {
                "description": "Size of the VM"
            }
        },
        "virtualNetworkName": {
            "type": "String",
            "metadata": {
                "description": "The name of the virtual network"
            }
        },
        "Subnet1Name": {
            "type": "String",
            "metadata": {
                "description": "The name of the 1st subnet"
            }
        },
        "vnetNewOrExisting": {
            "defaultValue": "existing",
            "allowedValues": [
                "new",
                "existing"
            ],
            "type": "String",
            "metadata": {
                "Description": "Indicates whether the virtual network is new or existing"
            }
        },
        "virtualNetworkExistingRGName": {
            "type": "String",
            "metadata": {
                "description": "Resource Group of the existing virtual network"
            }
        },
        "managementGUIClientNetwork": {
            "defaultValue": "0.0.0.0/0",
            "type": "String",
            "metadata": {
                "description": "Allowed GUI clients"
            }
        },
        "installationType": {
            "defaultValue": "management",
            "allowedValues": [
                "management",
                "custom"
            ],
            "type": "String",
            "metadata": {
                "description": "Installation Type"
            }
        },
        "baseUrl": {
            "defaultValue": "https://gallery.azure.com/artifact/20151001/checkpoint.vsecmanagement.1.0.12/Artifacts",
            "type": "String",
            "metadata": {
                "artifactsBaseUrl": ""
            }
        },
        "bootstrapScript": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Bootstrap script"
            }
        },
        "allowDownloadFromUploadToCheckPoint": {
            "defaultValue": "true",
            "allowedValues": [
                "true",
                "false"
            ],
            "type": "String",
            "metadata": {
                "description": "Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point"
            }
        },
        "additionalDiskSizeGB": {
            "defaultValue": 0,
            "minValue": 0,
            "maxValue": 3995,
            "type": "Int",
            "metadata": {
                "description": "Amount of additional disk space (in GB)"
            }
        },
        "diskType": {
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Premium_LRS"
            ],
            "type": "String",
            "metadata": {
                "description": "The type of the OS disk. Premium is applicable only to DS machine sizes"
            }
        },
        "preview": {
            "defaultValue": "",
            "allowedValues": [
                "",
                "-preview"
            ],
            "type": "String",
            "metadata": {
                "description": "Deploy the staged image"
            }
        },
        "Check_PointTags": {
            "defaultValue": {
                "provider": "30DE18BC-F9F6-4F22-9D30-54B8E74CFD5F"
            },
            "type": "Object"
        }
    },
    "variables": {
        "vnetID" : "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
        "subnetRef" : "[concat(variables('vnetID') , '/subnets/' , parameters('Subnet1Name'))]",
        "av-frwl45-name" : "av-frwl45-chkpt",
        "vm-name1-frwl" : "auennp-frwl-a01",
        "vm-name2-frwl" : "auennp-frwl-a02",
        "nic-name1-frwl" : "nic-auennp-frwl01",
        "nic-name2-frwl" : "nic-auennp-frwl02",
        "templateName": "management",
        "templateVersion": "20180226",
        "location": "[parameters('location')]",
        "offers": {
            "R77.30 - Bring Your Own License": "BYOL",
            "R80.10 - Bring Your Own License": "BYOL",
            "R80.10 - Pay As You Go (MGMT5)": "MGMT5"
        },
        "offer": "[variables('offers')[parameters('vsecVersion')]]",
        "osVersions": {
            "R77.30 - Bring Your Own License": "R7730",
            "R80.10 - Bring Your Own License": "R8010",
            "R80.10 - Pay As You Go (MGMT5)": "R8010"
        },
        "osVersion": "[variables('osVersions')[parameters('vsecVersion')]]",
        "computeApiVersion": "2017-03-30",
        "storageApiVersion": "2016-01-01",
        "networkApiVersion": "2016-06-01",
        "deploymentsApiVersion": "2016-02-01",
        "storageAccountName": "[concat('bootdiag', uniqueString(resourceGroup().id, deployment().name))]",
        "storageAccountType": "Standard_LRS",
        "diskSizeGBR7730": 50,
        "diskSizeGBR8010": 100,
        "diskSizeGB": "[add(parameters('additionalDiskSizeGB'), variables(concat('diskSizeGB', variables('osVersion'))))]",
        "customData": "[concat('#!/bin/bash\n', '\n', 'installationType=\"', variables('installationType'), '\"', '\n', 'allowUploadDownload=\"', variables('allowUploadDownload'), '\"', '\n', 'osVersion=\"', variables('osVersion'), '\"', '\n', 'templateName=\"', variables('templateName'), '\"', '\n', 'templateVersion=\"', variables('templateVersion'), '\"', '\n', '\n', 'echo \"template_name: $templateName\" >> /etc/cloud-version\n', 'echo \"template_version: $templateVersion\" >> /etc/cloud-version\n', '\n', 'bootstrap=\"$(dirname \"$0\")/bootstrap\"\n', 'cat <<<\"', variables('bootstrapScript64'), '\" | tr -d \"\\n\" | base64 -d >\"$bootstrap\"', '\n', 'dos2unix \"$bootstrap\"\n', 'chmod +x \"$bootstrap\"\n', '\"$bootstrap\"\n', '\n', 'function cluster {\n', '    subscriptionId=\"', subscription().subscriptionId, '\"', '\n', '    tenantId=\"', subscription().tenantId, '\"', '\n', '    resourceGroup=\"', resourceGroup().name, '\"', '\n', '    virtualNetwork=\"', parameters('virtualNetworkName'), '\"', '\n', '    clusterName=\"', variables('vm-name1-frwl'), '\"', '\n', '    lbName=\"frontend-lb\"\n', '    location=\"', variables('location'), '\"', '\n', '\n', '    case \"$location\" in\n', '    usgov*)\n', '        environment=\"AzureUSGovernment\"\n', '        ;;\n', '    china*)\n', '        environment=\"AzureChinaCloud\"\n', '        ;;\n', '    germany*)\n', '        environment=\"AzureGermanCloud\"\n', '        ;;\n', '    *)\n', '        environment=\"AzureCloud\"\n', '        ;;\n', '    esac\n', '\n', '    cat <<EOF >\"$FWDIR/conf/azure-ha.json\"\n', '{\n', '  \"debug\": false,\n', '  \"subscriptionId\": \"$subscriptionId\",\n', '  \"location\": \"$location\",\n', '  \"environment\": \"$environment\",\n', '  \"resourceGroup\": \"$resourceGroup\",\n', '  \"credentials\": {\n', '    \"tenant\": \"$tenantId\",\n', '    \"grant_type\": \"client_credentials\",\n', '    \"client_id\": \"\",\n', '    \"client_secret\": \"\"\n', '  },\n', '  \"proxy\": \"\",\n', '  \"virtualNetwork\": \"$virtualNetwork\",\n', '  \"clusterName\": \"$clusterName\",\n', 'EOF\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '    cat <<EOF >>\"$FWDIR/conf/azure-ha.json\"\n', '  \"lbName\": \"$lbName\"\n', '}\n', 'EOF\n', '}\n', '\n', '\n', 'case \"$installationType\" in\n', 'gateway)\n', '    installSecurityGateway=true\n', '    gateway_cluster_member=false\n', '    installSecurityManagement=false\n', '    sicKey=\"', variables('sicKey'), '\"', '\n', '    ;;\n', 'cluster)\n', '    installSecurityGateway=true\n', '    gateway_cluster_member=true\n', '    installSecurityManagement=false\n', '    sicKey=\"', variables('sicKey'), '\"', '\n', '    cluster\n', '    ;;\n', 'vmss)\n', '    installSecurityGateway=true\n', '    gateway_cluster_member=false\n', '    installSecurityManagement=false\n', '    sicKey=\"', variables('sicKey'), '\"', '\n', '    ;;\n', 'management)\n', '    installSecurityGateway=false\n', '    installSecurityManagement=true\n', '    sicKey=notused\n', '    ;;\n', 'custom)\n', '    exit 0\n', '    ;;\n', 'standalone | *)\n', '    installSecurityGateway=true\n', '    installSecurityManagement=true\n', '    gateway_cluster_member=false\n', '    sicKey=notused\n', '    ;;\n', 'esac\n', '\n', 'conf=\"install_security_gw=$installSecurityGateway\"\n', 'if \"$installSecurityGateway\"; then\n', '    conf=\"${conf}&install_ppak=true\"\n', '    conf=\"${conf}&gateway_cluster_member=$gateway_cluster_member\"\n', 'fi\n', 'conf=\"${conf}&install_security_managment=$installSecurityManagement\"\n', 'if \"$installSecurityManagement\"; then\n', '    if [ \"R7730\" == \"$osVersion\" ]; then\n', '        managementAdminPassword=\"$(dd if=/dev/urandom count=1 2>/dev/null | sha1sum | cut -c -28)\"\n', '        conf=\"${conf}&mgmt_admin_name=admin\"\n', '        conf=\"${conf}&mgmt_admin_passwd=${managementAdminPassword}\"\n', '    else\n', '        conf=\"${conf}&mgmt_admin_radio=gaia_admin\"\n', '    fi\n', '\n', '    managementGUIClientNetwork=\"', variables('managementGUIClientNetwork'), '\"', '\n', '    ManagementGUIClientBase=\"$(echo \"$managementGUIClientNetwork\" | cut -d / -f 1)\"\n', '    ManagementGUIClientMaskLength=\"$(echo \"$managementGUIClientNetwork\" | cut -d / -f 2)\"\n', '\n', '    conf=\"${conf}&install_mgmt_primary=true\"\n', '    conf=\"${conf}&mgmt_gui_clients_radio=network\"\n', '    conf=\"${conf}&mgmt_gui_clients_ip_field=$ManagementGUIClientBase\"\n', '    conf=\"${conf}&mgmt_gui_clients_subnet_field=$ManagementGUIClientMaskLength\"\n', 'fi\n', 'conf=\"${conf}&ftw_sic_key=$sicKey\"\n', '\n', 'conf=\"${conf}&download_info=$allowUploadDownload\"\n', 'conf=\"${conf}&upload_info=$allowUploadDownload\"\n', '\n', '#since DA process is running parallel to FTW and may cause to problems like SIM (TaskId=72815)\n', '#the DA is being stoped before FTW is running, and restart again after FTW is finished.\n', '/opt/CPda/bin/dastop\n', '\n', 'config_system -s \"$conf\"\n', '\n', '/opt/CPda/bin/dastart\n', '\n', 'pub_addr=\"$(ip addr show dev eth0 |     sed -n -e \"s|^ *inet \\\\([^/]*\\\\)/.* eth0:1\\$|\\\\1|p\")\"\n', '\n', 'if test -z \"$pub_addr\" ; then\n', '    pub_addr=\"$(get-cloud-data.sh         \"metadata/instance/network/interface?api-version=2017-04-02\" |         jq -r \".[].ipv4.ipAddress[].publicIpAddress\" |         grep --max-count 1 .)\"\n', '\n', '\n', '\n', '    test -z \"$pub_addr\" || {\n', '        echo \"interface:eth0:ipaddr:$pub_addr t\"\n', '        echo \"interface:eth0:ipaddr:$pub_addr:alias 1\"\n', '        echo \"interface:eth0:ipaddr:$pub_addr:mask 32\"\n', '    }\n', 'fi\n', '\n', 'if \"$installSecurityManagement\" && [ \"R7730\" != \"$osVersion\" ]; then\n', '    until mgmt_cli -r true discard ; do\n', '        sleep 30\n', '    done\n', '    addr=\"$(ip addr show dev eth0 |         sed -n -e \"s|^ *inet \\\\([^/]*\\\\)/.* eth0\\$|\\\\1|p\")\"\n', '\n', '    uid=\"$(mgmt_cli -r true show-generic-objects         class-name com.checkpoint.objects.classes.dummy.CpmiHostCkp         details-level full -f json |             jq -r \".objects[] | select(.ipaddr == \\\"$addr\\\") | .uid\")\"\n', '\n', '\n', '\n', '    test -z \"$uid\" || test -z \"$pub_addr\" || mgmt_cli -r true set-generic-object uid \"$uid\" ipaddr \"$pub_addr\"\n', '\n', '    chkconfig --add autoprovision\n', 'fi\n', '\n', 'if [ \"vmss\" == \"$installationType\" ]; then\n', '    addr=\"$(ip addr show dev eth0 | awk \"/inet/{print \\$2; exit}\" | cut -d / -f 1)\"\n', '    dynamic_objects -n LocalGateway -r \"$addr\" \"$addr\" -a\n', 'fi\n', '\n', 'if \"$installSecurityGateway\"; then\n', '    shutdown -r now\n', 'else\n', '    if \"$installSecurityManagement\" && [ \"R7730\" != \"$osVersion\" ]; then\n', '        service autoprovision start\n', '    fi\n', 'fi\n')]",
        "imageOfferR7730": "check-point-r77-10",
        "imageOfferR8010": "check-point-vsec-r80",
        "imageOffer": "[concat(variables(concat('imageOffer', variables('osVersion'))), parameters('preview'))]",
        "imagePublisher": "checkpoint",
        "imageReferenceBYOL": {
            "offer": "[variables('imageOffer')]",
            "publisher": "[variables('imagePublisher')]",
            "sku": "sg-byol",
            "version": "latest"
        },
        "imageReferenceMGMT5": {
            "offer": "[variables('imageOffer')]",
            "publisher": "[variables('imagePublisher')]",
            "sku": "mgmt-5",
            "version": "latest"
        },
        "imageReference": "[variables(concat('imageReference', variables('offer')))]",
        "linuxConfigurationpassword": {},
        "linuxConfigurationsshPublicKey": {
            "disablePasswordAuthentication": "true",
            "ssh": {
                "publicKeys": [
                    {
                        "keyData": "[parameters('sshPublicKey')]",
                        "path": "/home/notused/.ssh/authorized_keys"
                    }
                ]
            }
        },
        "linuxConfiguration": "[variables(concat('linuxConfiguration',parameters('authenticationType')))]",
        "planBYOL": {
            "name": "sg-byol",
            "product": "[variables('imageOffer')]",
            "publisher": "[variables('imagePublisher')]"
        },
        "planMGMT5": {
            "name": "mgmt-5",
            "product": "[variables('imageOffer')]",
            "publisher": "[variables('imagePublisher')]"
        },
        "plan": "[variables(concat('plan', variables('offer')))]",
        "publicIPAddressName1": "auennp-frwl-pip01",
        "publicIPAddressName2": "auennp-frwl-pip02",
        "publicIPAddressId1": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName1'))]",
        "publicIPAddressId2": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName2'))]",
        "nsgName": "[concat(variables('vm-name1-frwl'), '-nsg')]",
        "nsgId": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
        "bootstrapScript64": "[base64(parameters('bootstrapScript'))]",
        "allowUploadDownload": "[parameters('allowDownloadFromUploadToCheckPoint')]",
        "sicKey": "notused",
        "managementGUIClientNetwork": "[parameters('managementGUIClientNetwork')]",
        "installationType": "[parameters('installationType')]"
    },
    "resources": [
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('av-frwl45-name')]",
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "tags": {
              "lifecycle" : "prod-ncde",
              "dataclassification" : "dc2",
              "company" : "globalpay",
              "costcenter" : "24039",
              "country" : "united_states",
              "organization" : "bts",
              "department" : "infrastructure"
            },
            "properties": {
                "platformFaultDomainCount": 3,
                "platformUpdateDomainCount": 3
            },
            "sku" : { "name": "Aligned" }
        },

        {
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "[variables('storageAccountType')]"
            },
            "kind": "Storage",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]",
                "lifecycle" : "prod-ncde",
                "dataclassification" : "dc3",
                "company" : "globalpay",
                "costcenter" : "24039",
                "country" : "united_states",
                "organization" : "bts",
                "department" : "infrastructure"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName1')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]",
                "lifecycle" : "prod-ncde",
                "dataclassification" : "dc3",
                "company" : "globalpay",
                "costcenter" : "24039",
                "country" : "united_states",
                "organization" : "bts",
                "department" : "infrastructure"
            },
            "properties": {
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[concat(toLower(variables('vm-name1-frwl')), '-', uniquestring(resourceGroup().id, deployment().name))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName2')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]",
                "lifecycle" : "prod-ncde",
                "dataclassification" : "dc3",
                "company" : "globalpay",
                "costcenter" : "24039",
                "country" : "united_states",
                "organization" : "bts",
                "department" : "infrastructure"
            },
            "properties": {
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[concat(toLower(variables('vm-name2-frwl')), '-', uniquestring(resourceGroup().id, deployment().name))]"
                }
            }
        },

        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]",
                "lifecycle" : "prod-ncde",
                "dataclassification" : "dc3",
                "company" : "globalpay",
                "costcenter" : "24039",
                "country" : "united_states",
                "organization" : "bts",
                "department" : "infrastructure"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "Allow inbound SSH connection",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "[variables('managementGUIClientNetwork')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": "100",
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "GAiA-portal",
                        "properties": {
                            "description": "Allow inbound HTTPS access to the GAiA portal",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "[variables('managementGUIClientNetwork')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": "110",
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "SmartConsole-1",
                        "properties": {
                            "description": "Allow inbound access using the SmartConsole GUI client",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "18190",
                            "sourceAddressPrefix": "[variables('managementGUIClientNetwork')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": "120",
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "SmartConsole-2",
                        "properties": {
                            "description": "Allow inbound access using the SmartConsole GUI client",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "19009",
                            "sourceAddressPrefix": "[variables('managementGUIClientNetwork')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": "130",
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Logs",
                        "properties": {
                            "description": "Allow inbound logging connections from managed gateways",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "257",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": "140",
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "ICA-pull",
                        "properties": {
                            "description": "Allow security gateways to pull a SIC certificate",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "18210",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": "150",
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "CRL-fetch",
                        "properties": {
                            "description": "Allow security gateways to fetch CRLs",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "18264",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": "160",
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Policy-fetch",
                        "properties": {
                            "description": "Allow security gateways to fetch policy",
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "18191",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": "170",
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nic-name1-frwl')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]",
                "lifecycle" : "prod-ncde",
                "dataclassification" : "dc3",
                "company" : "globalpay",
                "costcenter" : "24039",
                "country" : "united_states",
                "organization" : "bts",
                "department" : "infrastructure"
            },
            "properties": {
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[variables('nsgId')]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "PublicIpAddress": {
                                "Id": "[variables('publicIPAddressId1')]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('nsgId')]",
                "[variables('publicIPAddressId1')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vm-name1-frwl')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "plan": "[variables('plan')]",
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]",
                "lifecycle" : "prod-ncde",
                "dataclassification" : "dc3",
                "company" : "globalpay",
                "costcenter" : "24039",
                "country" : "united_states",
                "organization" : "bts",
                "department" : "infrastructure"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('av-frwl45-name'))]"
                  },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic-name1-frwl'))]",
                            "properties": {
                                "primary": true
                            }
                        }
                    ]
                },
                "osProfile": {
                    "adminPassword": "[parameters('adminPassword')]",
                    "adminUsername": "notused",
                    "computerName": "[toLower(variables('vm-name1-frwl'))]",
                    "customData": "[base64(variables('customData'))]",
                    "linuxConfiguration": "[variables('linuxConfiguration')]"
                },
                "storageProfile": {
                    "imageReference": "[variables('imageReference')]",
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage",
                        "diskSizeGB": "[variables('diskSizeGB')]",
                        "name": "[variables('vm-name1-frwl')]",
                        "managedDisk": {
                            "storageAccountType": "[parameters('diskType')]"
                        }
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nic-name1-frwl'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('av-frwl45-name'))]"

            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nic-name2-frwl')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]",
                "lifecycle" : "prod-ncde",
                "dataclassification" : "dc3",
                "company" : "globalpay",
                "costcenter" : "24039",
                "country" : "united_states",
                "organization" : "bts",
                "department" : "infrastructure"
            },
            "properties": {
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[variables('nsgId')]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig2",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "PublicIpAddress": {
                                "Id": "[variables('publicIPAddressId2')]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('nsgId')]",
                "[variables('publicIPAddressId2')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vm-name2-frwl')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "plan": "[variables('plan')]",
            "tags": {
                "provider": "[toUpper(parameters('Check_PointTags').provider)]",
                "lifecycle" : "prod-ncde",
                "dataclassification" : "dc3",
                "company" : "globalpay",
                "costcenter" : "24039",
                "country" : "united_states",
                "organization" : "bts",
                "department" : "infrastructure"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('av-frwl45-name'))]"
                  },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic-name2-frwl'))]",
                            "properties": {
                                "primary": true
                            }
                        }
                    ]
                },
                "osProfile": {
                    "adminPassword": "[parameters('adminPassword')]",
                    "adminUsername": "notused",
                    "computerName": "[toLower(variables('vm-name2-frwl'))]",
                    "customData": "[base64(variables('customData'))]",
                    "linuxConfiguration": "[variables('linuxConfiguration')]"
                },
                "storageProfile": {
                    "imageReference": "[variables('imageReference')]",
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage",
                        "diskSizeGB": "[variables('diskSizeGB')]",
                        "name": "[variables('vm-name2-frwl')]",
                        "managedDisk": {
                            "storageAccountType": "[parameters('diskType')]"
                        }
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nic-name2-frwl'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('av-frwl45-name'))]"

            ]
        }


    ],
    "outputs": {
        "IPAddress": {
            "type": "String",
            "value": "[reference(variables('publicIPAddressId1')).IpAddress]"
        },
        "FQDN": {
            "type": "String",
            "value": "[reference(variables('publicIPAddressId1')).dnsSettings.fqdn]"
        }
    }
}